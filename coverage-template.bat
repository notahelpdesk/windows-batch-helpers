::
:: Coverage batch file
:: Description:
::        Use the Xunit Runners, OpenCover and ReportGenerator NuGet packages to create coverage files for automated builds
::        ReportUnit optionally used for local unit test reports
::        Most of this should be reusable for other projects
::
@echo off
setlocal
:: This gets the directory that this batch file lives in and assigns it to the startDir variable
for /f %%i in ("%0") do set startDir=%%~dpi
echo Starting in %startDir%
:: if the Configuration variable is set, then use it to find which directory holds the output files
if "%Configuration%" == "" (
	set Configuration=Debug
	echo Configuration property not present, setting to Debug
)

:: Always use BuildsDir env variable on a build server, so these values are set for local testing
if "%BuildsDir%" == "" (
	if "%CreateUnitTestReport%" == "" (
		echo CreateUnitTestReport is missing
		set CreateUnitTestReport=true
		set CoverageReportType=Html
	)
) else (
	set CreateUnitTestReport=false
	set CoverageReportType=HtmlSummary
)
echo Create unit test report? %CreateUnitTestReport%

:: to move this to any other project, you'll hopefully only need to update the principleDll value, and maybe the namespaces excluded by the filter
set principleDll=NotAHelpDesk.Utils
:: this is the file generated by OpenCover
set coveragefile=%startDir%%principleDll%.Tests\coverage.cobertura.xml
:: this is the file generated by nunit-console
set testResultsXml=%startDir%Reports\%principleDll%.UnitTests.xml
:: this is the HTML version of testResultsXml
set testResultsHtml=%startDir%Reports\%principleDll%.UnitTests.html
:: define variables for the dll files that contain the tests
set testsDll=%startDir%%principleDll%.Tests\bin\%Configuration%\%principleDll%.Tests.dll
echo Running tests for DLL %testsDll%

:: get full paths to the tools we need - as the version numbers may change, use an evaluating expression
for /f "delims=" %%n in ('dir /s /b reportunit.exe') do set unitTestReportTool=%%n
echo Unit test report tool %unitTestReportTool%

::xUnit has different runners for different .net frameworks, so having to be specific
set xunitRunner=%startDir%packages\xunit.runner.console.2.4.1\tools\net472\xunit.console.exe

::for /f "delims=" %%n in ('dir /s /b ReportGenerator.exe') do set reportGenerator=%%n
set reportGenerator=%startDir%packages\ReportGenerator.4.8.13\tools\net47\ReportGenerator.exe
echo Report Generator location: %reportGenerator%

for /f "delims=" %%n in ('dir /s /b OpenCover.Console.exe') do set openCover=%%n
echo Open Cover location: %openCover%

:: remove the existing reports directory
if exist "%startDir%Reports" (
	echo Removing current reports directory.
	rd /s /q "%startDir%Reports"
	md Reports
) else (
    md Reports
)
:: remove the coverage file just to make sure
del /s /q coverage.cobertura.xml
echo.
:: create the coverage file
:: note that the filter definition works by including (+) or excluding (-) assemblys [] and namespaces within them (entry following [])
:: so "-[*]PetaPoco.*" means "exclude any namespaces beginning with "PetaPoco" in any of the assemblies"
:: excludebyattribute is a bit of a cheat as it means that we can remove untestable code from the coverage by adding
::   'using System.Diagnostics.CodeAnalysis' to a class and then [ExcludeFromCodeCoverage] to the appropriate method
:: excludebyfile is set as opencover wanted to parse the XAML file despite it not being proper code
:: also note that "-register:user" has been replaced with "-register:Path64" as this is not dependent on registry entries

:: 2018-05-30: note that because this is a WPF app, the Views are untestable, as is the XamlGeneratedNamespace.GeneratedInternalTypeHelper
::             also, removing the nunit.framework, ColorCode and GalaSoft.MvvmLight* assemblies results in these disappearing from the list too
::			   as with other types of application, there's no point trying to test anything in the Properties namespace or the App namespace
::             PetaPoco is included even though it's not yet used by the utility (it is referenced though)
if "%UseOpenCover%" == "true" (
"%openCover%" ^
 -register:path64 ^
 -target:"%xunitRunner%" ^
 -targetdir:"%startDir%%principleDll%.Tests\bin\%configuration%" ^
 -searchdirs:"%startDir%%principleDll%.Tests\bin\%configuration%" ^
 -targetargs:"""%testsDll%"" -xml ""%testResultsXml%""" ^
 -filter:"+[NotAHelpDesk.*]* -[*.*Tests]* -[%principleDll%]%principleDll%.Views.* -[%principleDll%]%principleDll%.MainWindow -[%principleDll%]*.App -[*]XamlGeneratedNamespace.* -[*]*.Properties.* -[GalaSoft.MvvmLight*]*" ^
 -excludebyattribute:"System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage*" ^
 -output:"%coveragefile%"
) else (
dotnet test "%startDir%%principleDll%.sln" ^
  --no-build ^
  --configuration %Configuration% ^
  --results-directory "%startDir%Reports" ^
  --logger:"nunit;LogFilePath=%testResultsXml%" ^
  /p:CollectCoverage=true ^
  /p:CoverletOutputFormat=cobertura ^
  /p:Include=\"[NotAHelpDesk.*]*\" ^
  /p:Exclude=\"[*.*Tests]*,[*]*.App,[*]*.Views.*,[*]*.MainWindow,[*]*.Properties.*,[*]XamlGeneratedNamespace.\*" ^
  /p:Threshold=40 ^
  /p:ThresholdStat=total
)
:: turn the report file into a directory
::"%reportGenerator%" -reports:"%coveragefile%" -targetdir:"%startDir%Reports" -reporttypes:%CoverageReportType%
REM echo running reportGenerator
"%reportGenerator%" -reports:"%startDir%%principleDll%.Tests\coverage.cobertura.xml" -targetdir:"%startDir%Reports" -reporttypes:%CoverageReportType%
::"%reportGenerator%" -reports:"%startDir%%principleDll%.Tests\Reports.opencover.xml" -targetdir:"%startDir%Reports" -reporttypes:%CoverageReportType%

if "%CreateUnitTestReport%" == "true" (
:: Jenkins can process the unit test reports, but if we're running locally we might still want to see them
    echo Generating unit test report
	echo "%unitTestReportTool%" "%testResultsXml%" "%testResultsHtml%" 2>nul
	"%unitTestReportTool%" "%testResultsXml%" "%testResultsHtml%" 2>nul
)

echo Open Reports in Edge? %OpenReportsInEdge%
if "%OpenReportsInEdge%" == "true" (
	if "%CreateUnitTestReport%" == "true" (
		echo Opening coverage and unit test reports
		edge Reports\%principleDll%.UnitTests.html Reports\index.html
	) else (
		echo Opening coverage report
		edge Reports\index.html
	)
)

echo.
echo Done
endlocal